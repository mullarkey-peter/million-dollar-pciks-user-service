This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-01T13:49:11.821Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

- Pay special attention to the Repository Instruction. These contain important context and guidelines specific to this project.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
- Code comments have been removed.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitattributes
.gitignore
build.gradle
docker-compose.yml
Dockerfile
gradle/wrapper/gradle-wrapper.properties
gradlew
gradlew.bat
repomix-instructions.md
settings.gradle
src/main/java/com/glizzy/milliondollarpicks/userservice/client/AuthServiceClient.java
src/main/java/com/glizzy/milliondollarpicks/userservice/client/MockAuthServiceClient.java
src/main/java/com/glizzy/milliondollarpicks/userservice/config/SecurityConfig.java
src/main/java/com/glizzy/milliondollarpicks/userservice/dto/TokenValidationResultDto.java
src/main/java/com/glizzy/milliondollarpicks/userservice/dto/UserDto.java
src/main/java/com/glizzy/milliondollarpicks/userservice/dto/UserInfoDto.java
src/main/java/com/glizzy/milliondollarpicks/userservice/entity/User.java
src/main/java/com/glizzy/milliondollarpicks/userservice/exception/DuplicateUserException.java
src/main/java/com/glizzy/milliondollarpicks/userservice/exception/GlobalExceptionHandler.java
src/main/java/com/glizzy/milliondollarpicks/userservice/exception/UserNotFoundException.java
src/main/java/com/glizzy/milliondollarpicks/userservice/filter/JwtAuthenticationFilter.java
src/main/java/com/glizzy/milliondollarpicks/userservice/graphql/ScalarConfig.java
src/main/java/com/glizzy/milliondollarpicks/userservice/graphql/UserEntityFetcher.java
src/main/java/com/glizzy/milliondollarpicks/userservice/graphql/UserResolver.java
src/main/java/com/glizzy/milliondollarpicks/userservice/mapper/UserMapper.java
src/main/java/com/glizzy/milliondollarpicks/userservice/repository/UserRepository.java
src/main/java/com/glizzy/milliondollarpicks/userservice/service/UserService.java
src/main/java/com/glizzy/milliondollarpicks/userservice/service/UserServiceImpl.java
src/main/java/com/glizzy/milliondollarpicks/userservice/UserServiceApplication.java
src/main/proto/auth.proto
src/main/resources/application-docker.yml
src/main/resources/application.yml
src/main/resources/db/migration/V1__init_user_schema.sql
src/main/resources/db/migration/V2__update_id_to_bigserial.sql
src/main/resources/db/migration/V3__remove_password_field.sql
src/main/resources/schema/schema.graphqls

================================================================
Files
================================================================

================
File: .gitattributes
================
/gradlew text eol=lf
*.bat text eol=crlf
*.jar binary

================
File: .gitignore
================
HELP.md
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/

================
File: build.gradle
================
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'com.glizzy'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

ext {
    set('springCloudVersion', "2023.0.0")
    set('dgsVersion', "8.4.0")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/release" }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${dgsVersion}"
    }
}

dependencies {
    // Spring Web (Servlet)
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // JPA Dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'org.postgresql:postgresql'

    // Flyway for database migrations
    implementation 'org.flywaydb:flyway-core'

    // DGS Framework
    implementation platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${dgsVersion}")
    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter'
    implementation 'com.netflix.graphql.dgs:graphql-dgs-extended-scalars'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // gRPC
    implementation 'io.grpc:grpc-netty-shaded:1.60.0'
    implementation 'io.grpc:grpc-protobuf:1.60.0'
    implementation 'io.grpc:grpc-stub:1.60.0'

    // Update to jakarta.annotation-api
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.1"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.60.0"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Source directories for generated code
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
        proto {
            srcDir 'src/main/proto'
        }
    }
}

================
File: docker-compose.yml
================
version: '3.8'
services:
  user-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres:5432/userdb
      - SPRING_FLYWAY_USER=postgres
      - SPRING_FLYWAY_PASSWORD=postgres
      - AUTHENTICATION_ENABLED=false
    networks:
      - milliondollarpicks-network
    restart: unless-stopped
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=userdb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - milliondollarpicks-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - milliondollarpicks-network
    restart: unless-stopped
volumes:
  postgres-data:
networks:
  milliondollarpicks-network:
    driver: bridge

================
File: Dockerfile
================
# Build stage
FROM gradle:8.5-jdk17 AS build
WORKDIR /app

# Copy the gradle configuration files first
COPY gradle/ gradle/
COPY gradlew .
COPY gradlew.bat .
COPY settings.gradle .
COPY build.gradle .

# Give execution permission to gradlew
RUN chmod +x ./gradlew

# Copy the source code
COPY src/ src/

# Install protoc (for protocol buffers)
RUN apt-get update && apt-get install -y protobuf-compiler

# Build the application
RUN ./gradlew build -x test

# Run stage
FROM eclipse-temurin:17-jre-alpine
WORKDIR /app
COPY --from=build /app/build/libs/*.jar app.jar
ENTRYPOINT ["java","-jar","/app/app.jar"]

================
File: gradle/wrapper/gradle-wrapper.properties
================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.10-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: gradlew
================
#!/bin/sh

#
# Copyright Â© 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions Â«$varÂ», Â«${var}Â», Â«${var:-default}Â», Â«${var+SET}Â»,
#           Â«${var#prefix}Â», Â«${var%suffix}Â», and Â«$( cmd )Â»;
#         * compound commands having a testable exit status, especially Â«caseÂ»;
#         * various built-in commands including Â«commandÂ», Â«setÂ», and Â«ulimitÂ».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s
' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"

================
File: gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: repomix-instructions.md
================
# Repository Instructions

This repository contains the source code for the Repomix tool. Please follow these guidelines when analyzing the code:

1. Focus on the core functionality in the `src/core` directory.
2. Pay special attention to the security checks in `src/core/security`.
3. Ignore any files in the `tests` directory.

================
File: settings.gradle
================
plugins {
    id 'org.gradle.toolchains.foojay-resolver-convention' version '0.5.0' // or latest version
}

rootProject.name = 'user-service'

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/client/AuthServiceClient.java
================
package com.glizzy.milliondollarpicks.userservice.client;
import com.glizzy.milliondollarpicks.userservice.dto.TokenValidationResultDto;
import com.glizzy.milliondollarpicks.userservice.dto.UserInfoDto;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.StatusRuntimeException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import java.util.concurrent.TimeUnit;
@Component
@ConditionalOnProperty(name = "authentication.enabled", havingValue = "true", matchIfMissing = true)
public class AuthServiceClient {
    private static final Logger log = LoggerFactory.getLogger(AuthServiceClient.class);
    @Value("${grpc.client.auth-service.host:auth-service}")
    private String authServiceHost;
    @Value("${grpc.client.auth-service.port:9090}")
    private int authServicePort;
    private ManagedChannel channel;
    private AuthServiceGrpc.AuthServiceBlockingStub blockingStub;
    @PostConstruct
    public void init() {
        log.info("Initializing gRPC client to auth-service at {}:{}", authServiceHost, authServicePort);
        channel = ManagedChannelBuilder.forAddress(authServiceHost, authServicePort)
                .usePlaintext()
                .build();
        blockingStub = AuthServiceGrpc.newBlockingStub(channel);
    }
    @PreDestroy
    public void shutdown() {
        log.info("Shutting down gRPC client");
        if (channel != null) {
            try {
                channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                log.error("Error shutting down gRPC channel: {}", e.getMessage());
            }
        }
    }
    public TokenValidationResultDto validateToken(String token) {
        log.debug("Calling auth-service to validate token");
        try {
            TokenValidationRequest request = TokenValidationRequest.newBuilder()
                    .setToken(token)
                    .build();
            TokenValidationResponse response = blockingStub.validateToken(request);
            log.debug("Token validation response: valid={}", response.getValid());
            return new TokenValidationResultDto(response.getValid(), response.getMessage());
        } catch (StatusRuntimeException e) {
            log.error("RPC failed: {}", e.getStatus(), e);
            return new TokenValidationResultDto(false, "RPC Error: " + e.getStatus());
        }
    }
    public UserInfoDto getUserInfo(String token) {
        log.debug("Calling auth-service to get user info from token");
        try {
            TokenValidationRequest request = TokenValidationRequest.newBuilder()
                    .setToken(token)
                    .build();
            UserInfoResponse response = blockingStub.getUserInfo(request);
            log.debug("User info response: success={}, userId={}", response.getSuccess(), response.getUserId());
            if (response.getSuccess()) {
                return new UserInfoDto(response.getUserId(), response.getUsername());
            } else {
                log.warn("Failed to get user info: {}", response.getMessage());
                return null;
            }
        } catch (StatusRuntimeException e) {
            log.error("RPC failed: {}", e.getStatus(), e);
            return null;
        }
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/client/MockAuthServiceClient.java
================
package com.glizzy.milliondollarpicks.userservice.client;
import com.glizzy.milliondollarpicks.userservice.dto.TokenValidationResultDto;
import com.glizzy.milliondollarpicks.userservice.dto.UserInfoDto;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;
@Component
@ConditionalOnProperty(name = "authentication.enabled", havingValue = "false")
public class MockAuthServiceClient extends AuthServiceClient {
    @Override
    public TokenValidationResultDto validateToken(String token) {
        return new TokenValidationResultDto(true, "Authentication disabled");
    }
    @Override
    public UserInfoDto getUserInfo(String token) {
        return new UserInfoDto("test-user-id", "test-user");
    }
    @Override
    public void init() {
    }
    @Override
    public void shutdown() {
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/config/SecurityConfig.java
================
package com.glizzy.milliondollarpicks.userservice.config;
import com.glizzy.milliondollarpicks.userservice.filter.JwtAuthenticationFilter;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
@Configuration
public class SecurityConfig {
    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    public SecurityConfig(JwtAuthenticationFilter jwtAuthenticationFilter) {
        this.jwtAuthenticationFilter = jwtAuthenticationFilter;
    }
    @Bean
    @ConditionalOnProperty(name = "authentication.enabled", havingValue = "true", matchIfMissing = true)
    public FilterRegistrationBean<JwtAuthenticationFilter> jwtFilterRegistration() {
        FilterRegistrationBean<JwtAuthenticationFilter> registrationBean = new FilterRegistrationBean<>();
        registrationBean.setFilter(jwtAuthenticationFilter);
        registrationBean.addUrlPatterns("/graphql/*");
        return registrationBean;
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/dto/TokenValidationResultDto.java
================
package com.glizzy.milliondollarpicks.userservice.dto;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
@Data
@NoArgsConstructor
@AllArgsConstructor
public class TokenValidationResultDto {
    private boolean valid;
    private String message;
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/dto/UserDto.java
================
package com.glizzy.milliondollarpicks.userservice.dto;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;
import java.time.OffsetDateTime;
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserDto {
    private Long id;
    private String username;
    private OffsetDateTime registrationDate;
    private OffsetDateTime lastLoginDate;
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/dto/UserInfoDto.java
================
package com.glizzy.milliondollarpicks.userservice.dto;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserInfoDto {
    private String id;
    private String username;
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/entity/User.java
================
package com.glizzy.milliondollarpicks.userservice.entity;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.Column;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import java.time.OffsetDateTime;
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Column(name = "username", unique = true, nullable = false)
    private String username;
    @Column(name = "registration_date")
    private OffsetDateTime registrationDate;
    @Column(name = "last_login_date")
    private OffsetDateTime lastLoginDate;
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/exception/DuplicateUserException.java
================
package com.glizzy.milliondollarpicks.userservice.exception;
public class DuplicateUserException extends RuntimeException {
    public DuplicateUserException(String message) {
        super(message);
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/exception/GlobalExceptionHandler.java
================
package com.glizzy.milliondollarpicks.userservice.exception;
import com.netflix.graphql.dgs.exceptions.DefaultDataFetcherExceptionHandler;
import com.netflix.graphql.types.errors.TypedGraphQLError;
import graphql.execution.DataFetcherExceptionHandlerParameters;
import graphql.execution.DataFetcherExceptionHandlerResult;
import org.jetbrains.annotations.NotNull;
import org.springframework.stereotype.Component;
import java.util.concurrent.CompletableFuture;
@Component
public class GlobalExceptionHandler extends DefaultDataFetcherExceptionHandler {
    @NotNull
    @Override
    public CompletableFuture<DataFetcherExceptionHandlerResult> handleException(DataFetcherExceptionHandlerParameters handlerParameters) {
        Throwable exception = handlerParameters.getException();
        if (exception instanceof UserNotFoundException) {
            return CompletableFuture.completedFuture(
                DataFetcherExceptionHandlerResult.newResult()
                    .error(TypedGraphQLError.newBuilder()
                        .message(exception.getMessage())
                        .path(handlerParameters.getPath())
                        .build())
                    .build()
            );
        }
        if (exception instanceof DuplicateUserException) {
            return CompletableFuture.completedFuture(
                DataFetcherExceptionHandlerResult.newResult()
                    .error(TypedGraphQLError.newBuilder()
                        .message(exception.getMessage())
                        .path(handlerParameters.getPath())
                        .build())
                    .build()
            );
        }
        return super.handleException(handlerParameters);
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/exception/UserNotFoundException.java
================
package com.glizzy.milliondollarpicks.userservice.exception;
public class UserNotFoundException extends RuntimeException {
    public UserNotFoundException(String message) {
        super(message);
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/filter/JwtAuthenticationFilter.java
================
package com.glizzy.milliondollarpicks.userservice.filter;
import com.glizzy.milliondollarpicks.userservice.client.AuthServiceClient;
import com.glizzy.milliondollarpicks.userservice.dto.TokenValidationResultDto;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import java.io.IOException;
@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {
    private static final Logger log = LoggerFactory.getLogger(JwtAuthenticationFilter.class);
    private final AuthServiceClient authServiceClient;
    @Value("${authentication.enabled:true}")
    private boolean authenticationEnabled;
    public JwtAuthenticationFilter(AuthServiceClient authServiceClient) {
        this.authServiceClient = authServiceClient;
    }
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        if (!authenticationEnabled) {
            filterChain.doFilter(request, response);
            return;
        }
        String path = request.getRequestURI();
        if (path.contains("/graphiql")) {
            filterChain.doFilter(request, response);
            return;
        }
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            log.debug("Validating token from request");
            TokenValidationResultDto validationResult = authServiceClient.validateToken(token);
            if (validationResult.isValid()) {
                log.debug("Token is valid, proceeding with request");
                filterChain.doFilter(request, response);
            } else {
                log.warn("Invalid token: {}", validationResult.getMessage());
                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                response.getWriter().write("Unauthorized: " + validationResult.getMessage());
            }
        } else {
            if (path.equals("/graphql") && isAuthenticationRequired(request)) {
                log.warn("Missing Authorization header for GraphQL request");
                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                response.getWriter().write("Unauthorized: Missing or invalid token");
            } else {
                filterChain.doFilter(request, response);
            }
        }
    }
    private boolean isAuthenticationRequired(HttpServletRequest request) {
        try {
            String body = request.getReader().lines().reduce("", (accumulator, actual) -> accumulator + actual);
            return body.contains("mutation");
        } catch (IOException e) {
            log.error("Error reading request body", e);
            return false;
        }
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/graphql/ScalarConfig.java
================
package com.glizzy.milliondollarpicks.userservice.graphql;
import com.netflix.graphql.dgs.DgsComponent;
import com.netflix.graphql.dgs.DgsRuntimeWiring;
import graphql.scalars.ExtendedScalars;
import graphql.schema.idl.RuntimeWiring;
@DgsComponent
public class ScalarConfig {
    @DgsRuntimeWiring
    public RuntimeWiring.Builder addScalar(RuntimeWiring.Builder builder) {
        return builder
                .scalar(ExtendedScalars.DateTime)
                .scalar(ExtendedScalars.Object);
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/graphql/UserEntityFetcher.java
================
package com.glizzy.milliondollarpicks.userservice.graphql;
import com.glizzy.milliondollarpicks.userservice.dto.UserDto;
import com.glizzy.milliondollarpicks.userservice.service.UserService;
import com.netflix.graphql.dgs.DgsComponent;
import com.netflix.graphql.dgs.DgsEntityFetcher;
import lombok.RequiredArgsConstructor;
import java.util.Map;
@DgsComponent
@RequiredArgsConstructor
public class UserEntityFetcher {
    private final UserService userService;
    @DgsEntityFetcher(name = "User")
    public UserDto fetchUserById(Map<String, Object> values) {
        String id = (String) values.get("id");
        return userService.findUserById(Long.parseLong(id));
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/graphql/UserResolver.java
================
package com.glizzy.milliondollarpicks.userservice.graphql;
import com.glizzy.milliondollarpicks.userservice.dto.UserDto;
import com.glizzy.milliondollarpicks.userservice.service.UserService;
import com.netflix.graphql.dgs.DgsComponent;
import com.netflix.graphql.dgs.DgsQuery;
import com.netflix.graphql.dgs.DgsMutation;
import com.netflix.graphql.dgs.InputArgument;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
@DgsComponent
@RequiredArgsConstructor
public class UserResolver {
    private final UserService userService;
    private static final Logger log = LoggerFactory.getLogger(UserResolver.class);
    @DgsQuery
    public UserDto userByUsername(@InputArgument String username) {
        return userService.findUserByUsername(username);
    }
    @DgsQuery
    public UserDto userById(@InputArgument String id) {
        return userService.findUserById(Long.parseLong(id));
    }
    @DgsMutation
    public UserDto updateLastLogin(@InputArgument String username) {
        return userService.updateLastLogin(username);
    }
    @DgsMutation
    public UserDto createOrUpdateUser(@InputArgument String username) {
        return userService.createOrUpdateUser(username);
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/mapper/UserMapper.java
================
package com.glizzy.milliondollarpicks.userservice.mapper;
import com.glizzy.milliondollarpicks.userservice.dto.UserDto;
import com.glizzy.milliondollarpicks.userservice.entity.User;
import org.springframework.stereotype.Component;
@Component
public class UserMapper {
    public UserDto toDto(User user) {
        if (user == null) {
            return null;
        }
        return UserDto.builder()
                .id(user.getId())
                .username(user.getUsername())
                .registrationDate(user.getRegistrationDate())
                .lastLoginDate(user.getLastLoginDate())
                .build();
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/repository/UserRepository.java
================
package com.glizzy.milliondollarpicks.userservice.repository;
import com.glizzy.milliondollarpicks.userservice.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.Optional;
@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
    boolean existsByUsername(String username);
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/service/UserService.java
================
package com.glizzy.milliondollarpicks.userservice.service;
import com.glizzy.milliondollarpicks.userservice.dto.UserDto;
public interface UserService {
    UserDto findUserByUsername(String username);
    UserDto findUserById(Long id);
    UserDto updateLastLogin(String username);
    UserDto createOrUpdateUser(String username);
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/service/UserServiceImpl.java
================
package com.glizzy.milliondollarpicks.userservice.service;
import com.glizzy.milliondollarpicks.userservice.dto.UserDto;
import com.glizzy.milliondollarpicks.userservice.entity.User;
import com.glizzy.milliondollarpicks.userservice.mapper.UserMapper;
import com.glizzy.milliondollarpicks.userservice.exception.UserNotFoundException;
import com.glizzy.milliondollarpicks.userservice.repository.UserRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.time.OffsetDateTime;
import lombok.RequiredArgsConstructor;
@Service
@RequiredArgsConstructor
@Transactional
public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;
    private final UserMapper userMapper;
    @Override
    @Transactional(readOnly = true)
    public UserDto findUserByUsername(String username) {
        return userRepository.findByUsername(username)
                .map(userMapper::toDto)
                .orElseThrow(() -> new UserNotFoundException("User not found with username: " + username));
    }
    @Override
    @Transactional(readOnly = true)
    public UserDto findUserById(Long id) {
        return userRepository.findById(id)
                .map(userMapper::toDto)
                .orElseThrow(() -> new UserNotFoundException("User not found with id: " + id));
    }
    @Override
    public UserDto updateLastLogin(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UserNotFoundException("User not found with username: " + username));
        user.setLastLoginDate(OffsetDateTime.now());
        User savedUser = userRepository.save(user);
        return userMapper.toDto(savedUser);
    }
    @Override
    public UserDto createOrUpdateUser(String username) {
        return userRepository.findByUsername(username)
                .map(existingUser -> userMapper.toDto(userRepository.save(existingUser)))
                .orElseGet(() -> {
                    User newUser = new User();
                    newUser.setUsername(username);
                    newUser.setRegistrationDate(OffsetDateTime.now());
                    return userMapper.toDto(userRepository.save(newUser));
                });
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/userservice/UserServiceApplication.java
================
package com.glizzy.milliondollarpicks.userservice;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
@SpringBootApplication
@EnableConfigurationProperties
public class UserServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(UserServiceApplication.class, args);
    }
}

================
File: src/main/proto/auth.proto
================
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.glizzy.milliondollarpicks.authservice.grpc";
option java_outer_classname = "AuthProto";

package auth;

// Authentication service definition
service AuthService {
  // Validate a JWT token
  rpc ValidateToken (TokenValidationRequest) returns (TokenValidationResponse) {}

  // Get user info from token
  rpc GetUserInfo (TokenValidationRequest) returns (UserInfoResponse) {}
}

// The request message containing the token to validate
message TokenValidationRequest {
  string token = 1;
}

// The response message containing the validation result
message TokenValidationResponse {
  bool valid = 1;
  string message = 2;
}

// The response message containing user information
message UserInfoResponse {
  string user_id = 1;
  string username = 2;
  bool success = 3;
  string message = 4;
}

================
File: src/main/resources/application-docker.yml
================
spring:
  datasource:
    url: jdbc:postgresql://postgres:5432/userdb
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true
  flyway:
    url: ${SPRING_FLYWAY_URL:jdbc:postgresql://postgres:5432/userdb}
    user: ${SPRING_FLYWAY_USER:postgres}
    password: ${SPRING_FLYWAY_PASSWORD:postgres}
    baseline-on-migrate: true
    locations: classpath:db/migration
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    com.glizzy.milliondollarpicks: DEBUG
    org.springframework.boot: INFO
grpc:
  client:
    auth-service:
      host: auth-service
      port: 9090

================
File: src/main/resources/application.yml
================
spring:
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:userdb}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  flyway:
    baseline-on-migrate: true
    locations: classpath:db/migration
dgs:
  graphql:
    enabled: true
  graphiql:
    enabled: true
    path: /graphiql
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    com.glizzy.milliondollarpicks: DEBUG
grpc:
  client:
    auth-service:
      host: localhost
      port: 9090

================
File: src/main/resources/db/migration/V1__init_user_schema.sql
================
CREATE TABLE IF NOT EXISTS users (
     id SERIAL PRIMARY KEY,
     username VARCHAR(50) NOT NULL UNIQUE,
     password VARCHAR(255) NOT NULL,
     registration_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
     last_login_date TIMESTAMP
);

================
File: src/main/resources/db/migration/V2__update_id_to_bigserial.sql
================
ALTER TABLE users DROP CONSTRAINT users_pkey;
ALTER TABLE users
    ALTER COLUMN id TYPE BIGINT,
    ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);
ALTER TABLE users ADD PRIMARY KEY (id);

================
File: src/main/resources/db/migration/V3__remove_password_field.sql
================
ALTER TABLE users DROP COLUMN password;

================
File: src/main/resources/schema/schema.graphqls
================
scalar DateTime

type Query {
    userById(id: ID!): User
    userByUsername(username: String!): User
}

type Mutation {
    updateLastLogin(username: String!): User
    createOrUpdateUser(username: String!): User
}

type User {
    id: ID!
    username: String!
    registrationDate: DateTime
    lastLoginDate: DateTime
}


================================================================
Instruction
================================================================
# Repository Instructions

This repository contains the source code for the Repomix tool. Please follow these guidelines when analyzing the code:

1. Focus on the core functionality in the `src/core` directory.
2. Pay special attention to the security checks in `src/core/security`.
3. Ignore any files in the `tests` directory.
